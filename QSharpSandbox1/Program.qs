namespace Quantum.QSharpSandbox1 {

    open Microsoft.Quantum.Canon;
    open Microsoft.Quantum.Intrinsic;
    open Microsoft.Quantum.Convert;
    open Microsoft.Quantum.Arrays;

   
    newtype StringIntPair = (key: String, value: Int);

    function PrintForEach<'T>(list: 'T[], fun: ('T -> String)): Unit {
        for(item in list){
            Message(fun(item));
        }
    }

    function StringIntPairAsString(pair: StringIntPair): String {
        return pair::key + " " + IntAsString(pair::value);
    }

    operation MeasureOneQubit(): Result {
        using(qubit = Qubit()){
            H(qubit);
            let result = M(qubit);
            if(result == One){
                X(qubit);
            }
            return result;
        }
    }

    operation GenerateRandomNumberWithBitPlaces(bits: Int): Int {
        mutable arr = new Result[0];
         for(i in 0..1..bits){
            let result = MeasureOneQubit();
            set arr += [result];
        }
        return ResultArrayAsInt(arr);
    }

    function EqualsNumber(num: Int, numToMatch: Int): Bool{
        return num == numToMatch;
    }

    function IntArrayAsString(arr: Int[]): String {
        mutable joined = "";
        for(i in arr){
            set joined += IntAsString(i) + ",";
        }
        return joined;
    }

    
    @EntryPoint()
    operation HelloQ () : Unit {   
        /// Just some stuff
        Message("> Just some printed pairs");
        let arr = [
            StringIntPair("Ten",10),
            StringIntPair("Twenty",20),
            StringIntPair("Thirty",30)
        ];
        PrintForEach(arr,StringIntPairAsString);


        /// Generate 6 random numbers
        Message("> Numbers generated by superpositioned qubits");
        mutable randomNumbers = new Int[0];
        mutable counter = 0;
        repeat {
            let randomNumber = GenerateRandomNumberWithBitPlaces(5);
            let isNumberPresent = Any(EqualsNumber(_,randomNumber), randomNumbers);
            if(not isNumberPresent){
                set randomNumbers += [randomNumber];
            }
            set counter += 1;
        }
        until(Length(randomNumbers) > 5)
        fixup{
        }
        Message(IntArrayAsString(randomNumbers) + " with " + IntAsString(counter) + " cycles");
       
    }
}
